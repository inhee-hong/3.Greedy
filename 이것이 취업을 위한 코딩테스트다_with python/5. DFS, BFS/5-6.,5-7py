# DFS는 깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다. 
# 그래프는 노드와 간선으로 표현되며 이 때 노드를 정점이라고도 말한다.
# 그래프 탐색이란, 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말한다.

# 인접 행렬 : 2차원 배열로 그래프의 연결 관계를 표현하는 방식  --> Python에서 2차원 리스트로 구현 가능
# 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식

# 연결이 되어 있지 않은 노드끼리는 무한의 비용이라고 작성한다.

---------------------------------------------------------------------------------------------------------
# 인접 행렬 방식 예제

INF = 999999999 # 무한의 비용 선언

# 2차원 리스트를 이용해 인접 행렬 표현
graph = [
  [0, 7, 5],
  [7, 0, INF],
  [5, INF, 0]
]

print(graph)


#result
[[0, 7, 5], [7, 0, 999999999], [5, 999999999, 0]]
---------------------------------------------------------------------------------------------------------

# 인접 리스트 방식에서는 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장한다.
# Python으로 인접 리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 된다.

--------------------------------------------------------------------------------------------------------
# 인접 리스트 방식 예제

# 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] fo r_ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph)

# result
[[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]
-------------------------------------------------------------------------------------------------------

# 인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비되지만,
# 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 빠르다.

# 인접 리스트 방식은 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다.
# 하지만, 연결된 데이터를 하나씩 확인해야하기 때문에 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.
